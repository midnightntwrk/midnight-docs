# Midnight Network Documentation

> Midnight is a zero-knowledge partner chain to Cardano that revolutionizes blockchain privacy. Developed by Input Output Global (IOG), Midnight enables developers to build applications that can selectively hide sensitive information while still allowing public verification of correctness through advanced zero-knowledge cryptography.

## Network Status and Tokens

**Current Status**: Testnet (active for development and testing)
- Block time: 6 seconds
- Test tokens (tDUST) available via faucet for testing
- Mainnet launch planned but not yet available

**Dual-Token System**:
- **NIGHT**: Native utility token for governance, consensus, and block production rewards. Total supply: 24 billion tokens. Currently being distributed through "Glacier Drop" - a multi-phase distribution to holders of major cryptocurrencies (ADA, BTC, ETH, SOL, XRP, BNB, AVAX, BAT).
- **DUST**: Shielded network resource for transaction fees. Decays over time to ensure privacy. Generated by staking NIGHT tokens.

## Key Technologies

**Compact Programming Language**: A specialized programming language designed specifically for writing privacy-preserving smart contracts. Based on TypeScript syntax but compiled to zero-knowledge circuits. Unlike general-purpose languages, Compact is built from the ground up to work with zero-knowledge proofs, making it easier to write secure, private applications.

**Development Stack**:
- Smart contracts written in Compact language
- DApps built using standard TypeScript
- Proof server generates zero-knowledge proofs
- Midnight node connects to the network
- Lace wallet browser extension for integration

**Zero-Knowledge Proofs**: Mathematical techniques that allow one party to prove they know certain information without revealing that information. Currently transitioning from Pluto-Eris to BLS proving system for better performance.

**Partner Chain Architecture**: Rather than being a completely separate blockchain, Midnight connects to and inherits security from Cardano. Cardano Stake Pool Operators (SPOs) can become Midnight validators, ensuring proven security model while enabling privacy features.

## Development Environment and Requirements

**System Requirements**:
- Linux, macOS, or Windows (with WSL)
- Sufficient resources to run a full non-mining node
- Local proof server capability
- Docker support for containerized services

**Getting Started Process**:
1. Set up development environment
2. Install Compact compiler and development tools
3. Connect to Midnight testnet
4. Acquire test DUST (tDUST) tokens from faucet
5. Follow tutorials to build first application

## Real-World Applications

Midnight enables entirely new categories of blockchain applications:

**Private DeFi**: Financial applications where transaction amounts and trading strategies remain confidential while still being verifiable and auditable.

**Digital Identity**: Identity verification systems that can prove credentials (like age verification) without revealing unnecessary personal information.

**Confidential Voting**: Democratic decision-making systems where vote counting is transparent but individual votes remain secret.

**Supply Chain Privacy**: Track goods through supply chains while keeping sensitive business relationships and pricing confidential.

**Asset Tokenization**: Tokenize real-world assets like real estate while protecting sensitive ownership and valuation data.

**Confidential Business Logic**: Companies can run business processes on-chain without revealing sensitive commercial information to competitors.

## Getting Started Resources

- https://docs.midnight.network/quickstart/ - Complete setup from zero to first running application
- https://docs.midnight.network/develop/ - High-level architecture and key concepts
- https://docs.midnight.network/develop/tutorial/ - Builds a complete application from scratch
- https://docs.midnight.network/develop/tutorial/high-level-arch - How all the pieces fit together
- https://docs.midnight.network/develop/tutorial/building/ - Development workflow and best practices
- https://docs.midnight.network/develop/tutorial/building/examples-repo - Real-world reference implementations
- https://docs.midnight.network/develop/faq - Frequently asked questions about development

## Compact Programming Language

Compact is purpose-built for zero-knowledge applications. Unlike adapting existing languages, Compact was designed from scratch to make privacy-preserving programming natural and secure.

**Key Features**:
- TypeScript-based syntax for familiar development experience
- Statically typed with compile-time type checking
- Functional programming concepts
- Compiles to zero-knowledge circuits and TypeScript definitions
- Segregates data layer from application layer

**Documentation**:
- https://docs.midnight.network/develop/reference/compact/ - Philosophy and design principles
- https://docs.midnight.network/develop/reference/compact/lang-ref - Every syntax feature explained with examples
- https://docs.midnight.network/develop/reference/compact/compact-std-library/ - Built-in functions for cryptography, data structures, and blockchain interaction
- https://docs.midnight.network/develop/reference/compact/compact-grammar - Precise specification for tools and advanced users

## APIs and Integration

These APIs allow applications to interact with the Midnight network and integrate privacy features into existing systems.

- https://docs.midnight.network/develop/reference/midnight-api/ - How to connect external applications
- https://docs.midnight.network/develop/reference/midnight-api/compact-runtime/ - Execute Compact programs and handle results
- https://docs.midnight.network/develop/reference/midnight-api/compact-runtime/functions/addField - Low-level cryptographic operations for advanced use cases
- https://docs.midnight.network/develop/reference/midnight-api/compact-runtime/functions/mulField - Additional cryptographic primitives

These APIs provide both high-level convenience functions and low-level access to cryptographic primitives.

## Network Infrastructure

For those who want to participate in securing and operating the Midnight network.

**Validator Information**:
- Cardano SPOs can register as Midnight validators
- Must operate both Cardano stake pool and Midnight validator node
- Rewards paid in NIGHT tokens
- Re-registration required for major network upgrades

**Technical Documentation**:
- https://docs.midnight.network/validate/run-a-validator - How to run network infrastructure and participate in consensus
- https://docs.midnight.network/validate/run-a-validator/step-1 - Begin operating a Cardano Stake Pool

## Community and Support

**Getting Help and Staying Updated**:

- https://discord.com/invite/midnightnetwork - Real-time discussions, technical support, and developer collaboration
- https://x.com/MidnightNtwrk - Latest announcements, feature releases, and ecosystem news
- https://midnight.network/developer-hub - Developer resources and community hub
- https://github.com/midnight-ntwrk - Open source code repositories
- https://docs.midnight.network/learn/resources - Curated educational materials and background reading
- https://docs.midnight.network/learn/glossary - Definitions of technical terms and concepts

**Developer Academy**: Educational modules covering fundamentals through advanced concepts for building privacy-preserving applications.

The community includes cryptography researchers, privacy advocates, and developers building the next generation of privacy-preserving applications.

## Research and Development

Midnight is developed by Input Output Global (IOG), formerly known as IOHK, the research and development company behind Cardano. IOG has a strong focus on peer-reviewed research and formal verification methods, applying academic rigor to blockchain development. The team includes cryptographers, programming language researchers, and distributed systems experts who have been working on privacy-preserving technologies for years.

- **Research-First**: New features are typically published in academic papers before implementation
- **Formal Verification**: Mathematical proofs that code behaves correctly
- **Open Source**: All code is publicly available for review and contribution
- **Community-Driven**: Active engagement with developers and researchers worldwide
- **ZK-Lab**: Dedicated research lab for zero-knowledge technology advancement

## Important Technical Notes

**Development Considerations**:
- Test tokens (tDUST) have no real value and are only for testing
- BLS proving system transition may require contract recompilation
- Hard fork capabilities minimize disruption during upgrades
- Regular component updates may be required
- Active testnet with ongoing stability improvements

**Integration Points**:
- TypeScript/JavaScript SDK available
- RESTful APIs for external integration
- Cross-chain compatibility considerations
- Enterprise-ready deployment options planned

## Current Development Status

Midnight is currently in active development toward mainnet launch. The network is functional for development and testing, but protocols and APIs may change as the system matures. This is normal for cutting-edge technology that's pushing the boundaries of what's possible in blockchain privacy.

- APIs are stabilizing but may have breaking changes
- Test networks are available for development
- Production mainnet launch is planned but not yet available
- Regular updates and improvements are ongoing
- Partner-chains v1.5 upgrade with BLS proving system in progress

This documentation reflects the current state of the technology and is updated as features are added and refined.